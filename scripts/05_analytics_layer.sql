-- =====================================================
-- ANALYTICS LAYER - VIEWS E TABELAS AGREGADAS
-- =====================================================

USE SCHEMA ANALYTICS;

-- =====================================================
-- VIEWS ANALÍTICAS PRINCIPAIS
-- =====================================================

-- View: Vendas por Categoria e Período
CREATE OR REPLACE VIEW VW_VENDAS_CATEGORIA_PERIODO AS
SELECT 
    dt.ANO,
    dt.MES,
    dt.MES_NOME,
    dt.TRIMESTRE,
    dp.CATEGORIA_PRINCIPAL,
    dp.SUBCATEGORIA,
    dp.MARCA,
    
    -- Métricas de vendas
    COUNT(fv.VENDA_KEY) as TOTAL_VENDAS,
    SUM(fv.QUANTIDADE_VENDIDA) as QUANTIDADE_TOTAL,
    SUM(fv.PRECO_TOTAL) as RECEITA_BRUTA,
    SUM(fv.PRECO_FINAL) as RECEITA_LIQUIDA,
    SUM(fv.VALOR_DESCONTO) as TOTAL_DESCONTOS,
    AVG(fv.PRECO_UNITARIO) as PRECO_MEDIO,
    AVG(fv.QUANTIDADE_VENDIDA) as QUANTIDADE_MEDIA,
    
    -- Métricas de margem
    SUM(fv.MARGEM_BRUTA) as MARGEM_TOTAL,
    AVG(fv.PERCENTUAL_MARGEM) as MARGEM_PERCENTUAL_MEDIA,
    
    -- Análise de desconto
    AVG(fv.DESCONTO_APLICADO) as DESCONTO_MEDIO_PERCENTUAL,
    SUM(CASE WHEN fv.DESCONTO_APLICADO > 0 THEN 1 ELSE 0 END) as VENDAS_COM_DESCONTO,
    
    -- Ticket médio
    AVG(fv.PRECO_FINAL) as TICKET_MEDIO

FROM CORE_DATA.FATO_VENDAS fv
JOIN CORE_DATA.DIM_TEMPO dt ON fv.DATA_KEY = dt.DATA_KEY
JOIN CORE_DATA.DIM_PRODUTO dp ON fv.PRODUTO_KEY = dp.PRODUTO_KEY
WHERE fv.STATUS_VENDA = 'CONFIRMADA'
GROUP BY 
    dt.ANO, dt.MES, dt.MES_NOME, dt.TRIMESTRE,
    dp.CATEGORIA_PRINCIPAL, dp.SUBCATEGORIA, dp.MARCA;

-- View: Top Produtos por Performance
CREATE OR REPLACE VIEW VW_TOP_PRODUTOS_PERFORMANCE AS
SELECT 
    dp.PRODUTO_ID,
    dp.NOME_PRODUTO,
    dp.CATEGORIA_PRINCIPAL,
    dp.MARCA,
    dp.FAIXA_PRECO,
    dp.RATING_MEDIO,
    dp.NUMERO_AVALIACOES,
    
    -- Métricas de vendas
    COUNT(fv.VENDA_KEY) as TOTAL_VENDAS,
    SUM(fv.QUANTIDADE_VENDIDA) as QUANTIDADE_VENDIDA,
    SUM(fv.RECEITA_LIQUIDA) as RECEITA_TOTAL,
    AVG(fv.PRECO_FINAL) as PRECO_MEDIO_VENDA,
    
    -- Análise temporal
    MIN(dt.DATA_COMPLETA) as PRIMEIRA_VENDA,
    MAX(dt.DATA_COMPLETA) as ULTIMA_VENDA,
    DATEDIFF(day, MIN(dt.DATA_COMPLETA), MAX(dt.DATA_COMPLETA)) as DIAS_EM_VENDA,
    
    -- Performance relativa
    RANK() OVER (PARTITION BY dp.CATEGORIA_PRINCIPAL ORDER BY SUM(fv.RECEITA_LIQUIDA) DESC) as RANK_RECEITA_CATEGORIA,
    RANK() OVER (ORDER BY COUNT(fv.VENDA_KEY) DESC) as RANK_VOLUME_GERAL,
    
    -- Métricas de eficiência
    ROUND(SUM(fv.RECEITA_LIQUIDA) / NULLIF(DATEDIFF(day, MIN(dt.DATA_COMPLETA), MAX(dt.DATA_COMPLETA)), 0), 2) as RECEITA_POR_DIA

FROM CORE_DATA.DIM_PRODUTO dp
LEFT JOIN CORE_DATA.FATO_VENDAS fv ON dp.PRODUTO_KEY = fv.PRODUTO_KEY AND fv.STATUS_VENDA = 'CONFIRMADA'
LEFT JOIN CORE_DATA.DIM_TEMPO dt ON fv.DATA_KEY = dt.DATA_KEY
GROUP BY 
    dp.PRODUTO_ID, dp.NOME_PRODUTO, dp.CATEGORIA_PRINCIPAL, 
    dp.MARCA, dp.FAIXA_PRECO, dp.RATING_MEDIO, dp.NUMERO_AVALIACOES
HAVING COUNT(fv.VENDA_KEY) > 0;

-- View: Análise de Clientes
CREATE OR REPLACE VIEW VW_ANALISE_CLIENTES AS
SELECT 
    dc.CLIENTE_ID,
    dc.NOME_CLIENTE,
    dc.SEGMENTO_CLIENTE,
    dl.CIDADE,
    dl.ESTADO,
    dl.REGIAO,
    
    -- Métricas de compra
    COUNT(fv.VENDA_KEY) as TOTAL_PEDIDOS,
    SUM(fv.QUANTIDADE_VENDIDA) as TOTAL_ITENS_COMPRADOS,
    SUM(fv.RECEITA_LIQUIDA) as VALOR_TOTAL_COMPRAS,
    AVG(fv.PRECO_FINAL) as TICKET_MEDIO,
    
    -- Análise temporal
    MIN(dt.DATA_COMPLETA) as PRIMEIRA_COMPRA,
    MAX(dt.DATA_COMPLETA) as ULTIMA_COMPRA,
    DATEDIFF(day, MIN(dt.DATA_COMPLETA), MAX(dt.DATA_COMPLETA)) as DIAS_COMO_CLIENTE,
    
    -- Frequência de compra
    CASE 
        WHEN DATEDIFF(day, MIN(dt.DATA_COMPLETA), MAX(dt.DATA_COMPLETA)) > 0 
        THEN ROUND(COUNT(fv.VENDA_KEY) * 30.0 / DATEDIFF(day, MIN(dt.DATA_COMPLETA), MAX(dt.DATA_COMPLETA)), 2)
        ELSE 0 
    END as FREQUENCIA_COMPRA_MENSAL,
    
    -- Categorias preferidas
    LISTAGG(DISTINCT dp.CATEGORIA_PRINCIPAL, ', ') WITHIN GROUP (ORDER BY dp.CATEGORIA_PRINCIPAL) as CATEGORIAS_COMPRADAS,
    
    -- Classificação do cliente
    CASE 
        WHEN SUM(fv.RECEITA_LIQUIDA) > 1000 THEN 'Alto Valor'
        WHEN SUM(fv.RECEITA_LIQUIDA) > 500 THEN 'Médio Valor'
        WHEN SUM(fv.RECEITA_LIQUIDA) > 100 THEN 'Baixo Valor'
        ELSE 'Novo Cliente'
    END as CLASSIFICACAO_VALOR

FROM CORE_DATA.DIM_CLIENTE dc
LEFT JOIN CORE_DATA.FATO_VENDAS fv ON dc.CLIENTE_KEY = fv.CLIENTE_KEY AND fv.STATUS_VENDA = 'CONFIRMADA'
LEFT JOIN CORE_DATA.DIM_TEMPO dt ON fv.DATA_KEY = dt.DATA_KEY
LEFT JOIN CORE_DATA.DIM_PRODUTO dp ON fv.PRODUTO_KEY = dp.PRODUTO_KEY
LEFT JOIN CORE_DATA.DIM_LOCALIZACAO dl ON fv.LOCALIZACAO_KEY = dl.LOCALIZACAO_KEY
GROUP BY 
    dc.CLIENTE_ID, dc.NOME_CLIENTE, dc.SEGMENTO_CLIENTE,
    dl.CIDADE, dl.ESTADO, dl.REGIAO
HAVING COUNT(fv.VENDA_KEY) > 0;

-- =====================================================
-- TABELAS AGREGADAS (MARTS)
-- =====================================================

-- Mart: Vendas Diárias Agregadas
CREATE OR REPLACE TABLE MART_VENDAS_DIARIAS AS
SELECT 
    dt.DATA_COMPLETA,
    dt.ANO,
    dt.MES,
    dt.DIA_SEMANA,
    dt.NOME_DIA_SEMANA,
    dt.E_FIM_SEMANA,
    dt.E_DIA_UTIL,
    
    -- Métricas agregadas
    COUNT(fv.VENDA_KEY) as TOTAL_VENDAS,
    COUNT(DISTINCT fv.CLIENTE_KEY) as CLIENTES_UNICOS,
    COUNT(DISTINCT fv.PRODUTO_KEY) as PRODUTOS_VENDIDOS,
    SUM(fv.QUANTIDADE_VENDIDA) as QUANTIDADE_TOTAL,
    SUM(fv.RECEITA_LIQUIDA) as RECEITA_DIA,
    AVG(fv.PRECO_FINAL) as TICKET_MEDIO_DIA,
    
    -- Análise de performance
    MAX(fv.PRECO_FINAL) as MAIOR_VENDA_DIA,
    MIN(fv.PRECO_FINAL) as MENOR_VENDA_DIA,
    STDDEV(fv.PRECO_FINAL) as DESVIO_PADRAO_VENDAS

FROM CORE_DATA.DIM_TEMPO dt
LEFT JOIN CORE_DATA.FATO_VENDAS fv ON dt.DATA_KEY = fv.DATA_KEY AND fv.STATUS_VENDA = 'CONFIRMADA'
GROUP BY 
    dt.DATA_COMPLETA, dt.ANO, dt.MES, dt.DIA_SEMANA, 
    dt.NOME_DIA_SEMANA, dt.E_FIM_SEMANA, dt.E_DIA_UTIL;

-- Mart: Performance por Categoria e Marca
CREATE OR REPLACE TABLE MART_PERFORMANCE_CATEGORIA_MARCA AS
SELECT 
    dp.CATEGORIA_PRINCIPAL,
    dp.MARCA,
    dp.FAIXA_PRECO,
    
    -- Contadores
    COUNT(DISTINCT dp.PRODUTO_KEY) as TOTAL_PRODUTOS_CATALOGO,
    COUNT(DISTINCT CASE WHEN fv.VENDA_KEY IS NOT NULL THEN dp.PRODUTO_KEY END) as PRODUTOS_COM_VENDAS,
    
    -- Métricas de vendas
    COALESCE(COUNT(fv.VENDA_KEY), 0) as TOTAL_VENDAS,
    COALESCE(SUM(fv.QUANTIDADE_VENDIDA), 0) as QUANTIDADE_VENDIDA,
    COALESCE(SUM(fv.RECEITA_LIQUIDA), 0) as RECEITA_TOTAL,
    COALESCE(AVG(fv.PRECO_FINAL), 0) as TICKET_MEDIO,
    
    -- Análise de produtos
    AVG(dp.RATING_MEDIO) as RATING_MEDIO_CATEGORIA,
    AVG(dp.NUMERO_AVALIACOES) as AVALIACOES_MEDIA,
    AVG(dp.PRECO_ATUAL) as PRECO_MEDIO_CATALOGO,
    
    -- Performance relativa
    ROUND(
        COALESCE(COUNT(DISTINCT CASE WHEN fv.VENDA_KEY IS NOT NULL THEN dp.PRODUTO_KEY END), 0) * 100.0 / 
        NULLIF(COUNT(DISTINCT dp.PRODUTO_KEY), 0), 2
    ) as PERCENTUAL_PRODUTOS_VENDIDOS

FROM CORE_DATA.DIM_PRODUTO dp
LEFT JOIN CORE_DATA.FATO_VENDAS fv ON dp.PRODUTO_KEY = fv.PRODUTO_KEY AND fv.STATUS_VENDA = 'CONFIRMADA'
GROUP BY dp.CATEGORIA_PRINCIPAL, dp.MARCA, dp.FAIXA_PRECO;
